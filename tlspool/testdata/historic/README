README for tlspool/testdata
===========================

This directory holds test data, with barren private keys.  The keys are
useful while testing with _file primitives.

TLS Pool will at some point abandon the file-based versions, and move
them to PKCS #11.  For testing purposes, a SoftHSMv1 database will
be included with the credentials to use then.

The TLS Pool project funds GnuTLS to ensure PKCS #11 support for the
following mechanisms:

 * X.509, was already taken care of before TLS Pool started
 * GnuPG, according to http://openfortress.nl/doc/spec/pgp-in-pkcs11/
 * KDH, as described on http://tls-kdh.arpa2.net
 * SRP, at least the password and if possible also the DH-ish calculations


Credentials stored in files
---------------------------

tlspool-test-ca-cert.pem

	A test CA with 10 years of validity.  No private key needed.

tlspool-test-client-cert.pem

	A test X.509 client certificate in PEM format, 10 years validity.

tlspool-test-server-cert.pem

	A test X.509 server certificate in PEM format, 10 years validity.

tlspool-test-client-key.pem

	The private key for the X.509 client certificate in PEM format.
	No password encryption on this private key.

tlspool-test-server-key.pem

	The private key for the X.509 server certificate in PEM format.
	No password encryption on this private key.

tlspool-test-client-pubkey.asc

	A test client OpenPGP public key in ASCII armour, 10 years validity.

tlspool-test-server-privkey.asc

	A test server OpenPGP public key in ASCII armour, 10 years validity.

tlspool-test-client-privkey.asc

	The private key for the client OpenPGP public key, in ASCII armour.
	No password encryption on this private key.

tlspool-test-server-pubkey.asc

	The private key for the server OpenPGP public key, in ASCII armour.
	No password encryption on this private key.

tlspool-test-srp.conf

	The configuration file for SRP, generated with srptool.

tlspool-test-srp.passwd

	The configuration for file SRP, holding user "tester" with
	password "test".


PKCS #11 databases for SoftHSMv1
--------------------------------

**softhsm-tlspool.db**

The slot database for SoftHSMv1.

* Format is a SQLite3 database (without encryption).

* The user PIN is 1234.
* CKA_VALUE is stored as type=3 in table Attributes
* CKA_ID is stored as type=258 in table Attributes
* TODO: Separate client and server.
* Objects inserted:

  - obj1id: OpenPGP private key for testcli@tlspool.arpa2.lab (not available in file)
  - obj2id: OpenPGP private key for testsrv@tlspool.arpa2.lab (not available in file)
  - obj3id: X.509 private key for the client (also available in file)
  - obj4id: X.509 private key for the server (also available in file)

``pkcs11-tool --module /usr/local/lib/softhsm/libsofthsm.so --list-slots``

::

	Available slots:
	Slot 0           SoftHSM
	  token label:   TLS Pool testdata
	  token manuf:   SoftHSM
	  token model:   SoftHSM
	  token flags:   rng, login required, PIN initialized, token initialized, other flags=0x40
	  serial num  :  1

``pkcs11-tool --module /usr/local/lib/softhsm/libsofthsm.so --login --list-objects``

::

	Private Key Object; RSA 
	  label:      obj4label
	  ID:         6f626a346964
	  Usage:      sign
	Private Key Object; RSA 
	  label:      obj3label
	  ID:         6f626a336964
	  Usage:      sign
	Private Key Object; RSA 
	  label:      obj2label
	  ID:         6f626a326964
	  Usage:      decrypt, sign, unwrap
	Private Key Object; RSA 
	  label:      obj1label
	  ID:         6f626a316964
	  Usage:      decrypt, sign, unwrap

``p11tool --login --list-all``

	Enter PIN: 1234
	Token 'TLS Pool testdata' with URL 'pkcs11:model=SoftHSM;manufacturer=SoftHSM;serial=1;token=TLS%20Pool%20testdata' requires user PIN
	Object 0:
		URL: pkcs11:model=SoftHSM;manufacturer=SoftHSM;serial=1;token=TLS%20Pool%20testdata;id=obj4id;object=obj4label;object-type=private
		Type: Private key
		Label: obj4label
		ID: 6f:62:6a:34:69:64

	Object 1:
		URL: pkcs11:model=SoftHSM;manufacturer=SoftHSM;serial=1;token=TLS%20Pool%20testdata;id=obj3id;object=obj3label;object-type=private
		Type: Private key
		Label: obj3label
		ID: 6f:62:6a:33:69:64

	Object 2:
		URL: pkcs11:model=SoftHSM;manufacturer=SoftHSM;serial=1;token=TLS%20Pool%20testdata;id=obj2id;object=obj2label;object-type=private
		Type: Private key
		Label: obj2label
		ID: 6f:62:6a:32:69:64

	Object 3:
		URL: pkcs11:model=SoftHSM;manufacturer=SoftHSM;serial=1;token=TLS%20Pool%20testdata;id=obj1id;object=obj1label;object-type=private
		Type: Private key
		Label: obj1label
		ID: 6f:62:6a:31:69:64

Token::

	pkcs11:model=SoftHSM;manufacturer=SoftHSM;serial=1;token=TLS%20Pool%20testdata

Private keys::

	pkcs11:model=SoftHSM;manufacturer=SoftHSM;serial=1;token=TLS%20Pool%20testdata;id=obj1id;object=obj1label;object-type=private
	pkcs11:model=SoftHSM;manufacturer=SoftHSM;serial=1;token=TLS%20Pool%20testdata;id=obj2id;object=obj2label;object-type=private
	pkcs11:model=SoftHSM;manufacturer=SoftHSM;serial=1;token=TLS%20Pool%20testdata;id=obj3id;object=obj3label;object-type=private
	pkcs11:model=SoftHSM;manufacturer=SoftHSM;serial=1;token=TLS%20Pool%20testdata;id=obj4id;object=obj4label;object-type=private

Usable for, respectively:

* client PGP key
* server PGP key
* client X.509 key
* server X.509 key

(This has been setup in the ``localid.db`` file.)

``pkcs11-dump dump /usr/local/lib/softhsm/libsofthsm.so 0 1234``

::

	pkcs11-dump 0.3.2 - pki cryptoki token dump
	written by alon bar-lev

	copyright (c) 2005-2006 alon bar-lev.
	this is free software; see the source for copying conditions.
	there is no warranty; not even for merchantability or fitness for a particular purpose.

	token information:
				 label: tls pool testdata               
			manufacturerid: softhsm                         
				 model: softhsm         
			  serialnumber: 1               
				 flags: ckf_rng,ckf_login_required,ckf_user_pin_initialized,ckf_clock_on_token,ckf_token_initialized
		     ulmaxsessioncount: 256
		     ulmaxsessioncount: 256
			   ulmaxpinlen: 255
			   ulminpinlen: 4
		   ultotalpublicmemory: -1
		    ulfreepublicmemory: -1
		  ultotalprivatememory: -1
		   ulfreeprivatememory: -1
		       hardwareversion: 001.003
		       firmwareversion: 001.003
			       utctime: 2015010817400100
	object 0
			   object size: unknown
			     cka_class: cko_private_key
			     cka_token: true
			   cka_private: true
			     cka_label: obj4label
			  cka_key_type: ckk_rsa
			   cka_subject: error

				cka_id: 
	6f 62 6a 34 69 64 

			 cka_sensitive: true
			   cka_decrypt: false
			    cka_unwrap: false
			      cka_sign: true
		      cka_sign_recover: true
			    cka_derive: false
			cka_start_date: 
			  cka_end_date: 
			   cka_modulus: 
	f2 04 41 3d d1 b2 f6 f8 ef 3b e4 c1 67 66 2e e5 
	16 75 0e ac f2 25 45 7a e6 8a 2b fc 8c 86 10 9d 
	a1 37 ec d6 f1 bc 3f e6 00 58 b5 1e 04 a4 07 85 
	a5 25 70 0a 7f 31 fc b5 bf a6 52 f2 67 28 67 23 
	59 cc e2 47 79 31 76 c4 43 98 c3 d0 c6 ac 8e c3 
	07 a2 1f 59 3a 57 59 32 d5 8b 3c 80 1d b7 e5 f6 
	66 a2 04 01 ce 82 f3 7c b4 44 da 0f 66 8f 08 8d 
	6a 5b 72 0a a0 8b 4f d5 b8 39 a1 ea be 04 ec 3d 
	60 bc d1 22 03 59 67 5a 37 29 76 6c b5 0f c3 98 
	48 22 99 87 e2 aa 77 23 42 f1 cf 42 61 0f 83 ab 
	1b 79 f7 a2 99 6f 7b 99 ca 52 e3 4e 9b ae a8 2f 
	0a ab 5d eb 07 63 a0 81 ff f1 48 1f 4f 96 61 12 
	c9 60 dc d1 06 03 95 82 e2 84 6b ad a3 87 aa c7 
	ef fc c0 c0 f6 67 0d c4 f3 7f 9c 5c 58 b8 c7 87 
	cb 5b 48 65 a8 6e 34 0d 05 b7 91 1f 1e 4d e9 af 
	c6 2c 7d 29 69 e4 4a 99 89 56 c4 a9 ce 58 8a 83 

		   cka_public_exponent: 
	01 00 01 

		       cka_extractable: false
			     cka_local: false
		 cka_never_extractable: true
		  cka_always_sensitive: true
		 cka_key_gen_mechanism: unknown ck_mechanism_type ffffffffffffffff
			cka_modifiable: true
	       cka_always_authenticate: false
		 cka_wrap_with_trusted: true
	object 1
			   object size: unknown
			     cka_class: cko_private_key
			     cka_token: true
			   cka_private: true
			     cka_label: obj3label
			  cka_key_type: ckk_rsa
			   cka_subject: error

				cka_id: 
	6f 62 6a 33 69 64 

			 cka_sensitive: true
			   cka_decrypt: false
			    cka_unwrap: false
			      cka_sign: true
		      cka_sign_recover: true
			    cka_derive: false
			cka_start_date: 
			  cka_end_date: 
			   cka_modulus: 
	b3 06 51 f2 3a 03 4e b0 7e 4c 91 5e 73 0c 70 65 
	a3 f2 63 f4 4b 13 aa 51 9e 42 b0 41 52 d0 42 31 
	94 60 66 07 6f 43 96 00 90 3d dc ce 03 2b af 28 
	e1 77 f2 c1 ac 68 d4 72 f6 7d 0f 5d b1 40 73 85 
	fd 1e 6d cf 7a 49 b6 12 8a c3 55 74 02 a9 0d 54 
	1f 18 17 9f d5 15 79 8f 9d d8 f8 99 83 6a 49 93 
	35 d0 9c 61 20 88 d2 e6 c8 be 4b e1 e3 67 5a 60 
	4e b5 6c ab f7 85 5d d6 10 26 99 d1 dd 2b c5 6b 
	d8 4e 39 15 83 3b ed ca 03 09 bd e1 1a 83 d8 86 
	0a 23 ee 3a d0 41 58 90 77 d2 1f 67 28 db f7 0c 
	4d c7 f2 ab 9a d5 7c f0 eb e6 be db eb 01 cf e0 
	76 b7 63 e6 b2 2c 86 ed ef 5e bc 4b 2d 59 11 ea 
	96 b9 0f f8 ce b4 d2 24 d5 6f af 6a 78 e1 28 2b 
	28 ad 88 e5 d4 b6 28 13 07 14 15 62 1b 67 46 10 
	c7 5e 95 97 07 07 34 50 2e d1 eb 53 61 94 d4 b8 
	8a c3 b1 ff 54 0a 87 08 19 92 95 66 71 f4 d9 53 

		   cka_public_exponent: 
	01 00 01 

		       cka_extractable: false
			     cka_local: false
		 cka_never_extractable: true
		  cka_always_sensitive: true
		 cka_key_gen_mechanism: unknown ck_mechanism_type ffffffffffffffff
			cka_modifiable: true
	       cka_always_authenticate: false
		 cka_wrap_with_trusted: true
	object 2
			   object size: unknown
			     cka_class: cko_private_key
			     cka_token: true
			   cka_private: true
			     cka_label: obj2label
			  cka_key_type: ckk_rsa
			   cka_subject: error

				cka_id: 
	6f 62 6a 32 69 64 

			 cka_sensitive: true
			   cka_decrypt: true
			    cka_unwrap: true
			      cka_sign: true
		      cka_sign_recover: true
			    cka_derive: false
			cka_start_date: 
			  cka_end_date: 
			   cka_modulus: 
	ae 83 2e 72 2c 3a f0 8a 67 e2 52 93 23 8f 35 2a 
	52 b8 bc 50 61 64 bc 96 e5 3a de 7b 20 fc 94 8f 
	98 81 5d f9 e1 93 2a 31 02 57 19 da a7 67 4f 9f 
	65 82 66 2c 8a 14 c3 7b 16 b2 33 74 e9 dc 72 43 
	1b 2f 50 5d bf c8 72 93 d4 a7 62 21 4b c9 9f 06 
	24 85 32 ff 6c 91 a5 b4 83 c7 78 91 83 89 44 30 
	db d4 ca 1d 75 fe e3 81 7f 91 14 a4 ee cd 8c 57 
	ef 64 af 3e a2 bb d3 cb 74 82 91 15 d7 19 2e 92 
	e6 1a c3 5e 6a d3 2c 7c a1 ad 7d 77 b7 f3 61 76 
	55 f5 2b 32 d6 b5 0a e7 a2 c1 f9 90 f5 65 13 34 
	d0 19 b0 67 d8 15 9a 23 ca 60 26 9b 33 44 54 30 
	60 80 82 14 8a 67 2b 55 76 17 9c c3 3f 19 43 ce 
	e8 b9 c2 66 b3 dc 82 36 77 d8 20 bc 6d fd 1f b2 
	37 e0 e7 c0 c3 03 11 ce be 53 df b6 6f 90 b9 ee 
	a6 a1 f2 0b e7 9e d1 4d 5a a4 b0 ad 1f 15 22 a0 
	22 22 e3 4d 18 d8 3e d2 f8 e6 9d 1b 65 b7 0e 2f 

		   CKA_PUBLIC_EXPONENT: 
	01 00 01 

		       CKA_EXTRACTABLE: FALSE
			     CKA_LOCAL: TRUE
		 CKA_NEVER_EXTRACTABLE: TRUE
		  CKA_ALWAYS_SENSITIVE: TRUE
		 CKA_KEY_GEN_MECHANISM: CKM_RSA_PKCS_KEY_PAIR_GEN
			CKA_MODIFIABLE: TRUE
	       CKA_ALWAYS_AUTHENTICATE: FALSE
		 CKA_WRAP_WITH_TRUSTED: TRUE
	Object 3
			   Object size: Unknown
			     CKA_CLASS: CKO_PRIVATE_KEY
			     CKA_TOKEN: TRUE
			   CKA_PRIVATE: TRUE
			     CKA_LABEL: obj1label
			  CKA_KEY_TYPE: CKK_RSA
			   CKA_SUBJECT: ERROR

				CKA_ID: 
	6f 62 6a 31 69 64 

			 CKA_SENSITIVE: TRUE
			   CKA_DECRYPT: TRUE
			    CKA_UNWRAP: TRUE
			      CKA_SIGN: TRUE
		      CKA_SIGN_RECOVER: TRUE
			    CKA_DERIVE: FALSE
			CKA_START_DATE: 
			  CKA_END_DATE: 
			   CKA_MODULUS: 
	db 11 b3 23 5c 2d 30 b0 ba 36 8f 1e 8a 90 20 3c 
	26 3a de 71 21 69 09 35 e7 4a d7 4e e6 48 a9 ae 
	1d 23 c8 2a e4 43 e7 17 2f 94 70 89 ee ce f5 47 
	b3 77 58 a2 b0 cd 88 2e 17 e6 eb 2d be b9 0d e9 
	30 29 fe a8 8d 79 58 be 6d 0a b3 21 09 3f 23 aa 
	fb 6f 3d f5 8e c0 21 8a a0 28 92 91 66 8a ca db 
	9e d6 75 c8 63 5d 65 c6 8c 66 e3 c5 72 7b 93 c6 
	fd c9 dd 6b f0 4a 1a 1d 31 b0 b1 f4 a8 3d 48 d1 
	f5 04 58 d6 ac a2 19 04 23 f0 48 54 0b 8a 94 83 
	dc db b8 80 b5 05 72 fd c4 85 88 20 7f 9c 83 f0 
	8c 3e bf 45 f5 9b a8 7d e2 6b 21 48 86 a6 fa 83 
	dd fc 68 f4 ed 20 79 12 91 4f 65 d5 b6 3d d4 66 
	8e 46 8e bc 67 14 63 d7 9a d5 52 3f 8b 38 56 99 
	e3 b8 ef a2 a9 a1 e6 e1 36 00 77 19 07 25 58 fd 
	75 18 bf 94 cc c4 f2 dc 34 ab 7f ad ef f4 07 32 
	3f 8e 3d 4d 72 66 88 15 61 33 6f 31 33 88 4c af 

		   CKA_PUBLIC_EXPONENT: 
	01 00 01 

		       CKA_EXTRACTABLE: FALSE
			     CKA_LOCAL: TRUE
		 CKA_NEVER_EXTRACTABLE: TRUE
		  CKA_ALWAYS_SENSITIVE: TRUE
		 CKA_KEY_GEN_MECHANISM: CKM_RSA_PKCS_KEY_PAIR_GEN
			CKA_MODIFIABLE: TRUE
	       CKA_ALWAYS_AUTHENTICATE: FALSE
		 CKA_WRAP_WITH_TRUSTED: TRUE

Note::

	Import the key and then: 

	$ gpg --list-keys --with-key-data KEYID 

	In the output look for pkd records: 

	If field 1 has the tag "pkd", a listing looks like this: 
	pkd:0:1024:B665B1435F4C2 .... FF26ABB: 
	    ! !    !-- the value 
	    ! !------- for information: number of bits in the value 
	    !--------- index (eg. DSA goes from 0 to 3: p,q,g,y) 

	The entire format is decribed in doc/DETAILS. 


Done:

1. Reformat the RSA private keys for certificates from PKCS #1 to PKCS #8 using::

	openssl pkcs8 -topk8 -in p1form.pem -out p8form.pem -inform pem -outform pem -nocrypt

2. Import the PKCS #8 form into the token::

	softhsm-util --slot 0 --pin 1234 --import p8form.pem --no-public-key --label objXlabel --id objXid # rewrite ID in hex


